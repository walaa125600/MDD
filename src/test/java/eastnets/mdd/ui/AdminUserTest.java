package eastnets.mdd.ui;

import com.paypal.selion.platform.dataprovider.DataProviderFactory;
import com.paypal.selion.platform.dataprovider.DataResource;
import com.paypal.selion.platform.dataprovider.SeLionDataProvider;
import com.paypal.selion.platform.dataprovider.impl.InputStreamResource;
import core.BaseTest;
import core.ExceptionHandler;
import core.constants.mdd.GeneralConstants;
import core.gui.Controls;
import core.util.Log;
import core.util.Property;
import core.util.Randomizer;
import eastnets.common.gui.LoginPage;
import eastnets.mdd.control.AdminUserControl;
import eastnets.mdd.entity.User;
import eastnets.mdd.gui.adminstrator.users.UsersManager;
import org.testng.Assert;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import java.io.FileInputStream;
import java.io.IOException;
public class AdminUserTest extends BaseTest {

    @BeforeClass(alwaysRun = true)
    public void login() {
        try {
            LoginPage.login(driver
                    , Property.fromFile(GeneralConstants.TEST_CONFIG_FILE_NAME).getProperty("login.mdd.userMail")
                    , Property.fromFile(GeneralConstants.TEST_CONFIG_FILE_NAME).getProperty("login.mdd.password"));
        } catch (Exception e) {
            ExceptionHandler.onExceptionRaised(e
                    , new Object() {
                    }.getClass().getName()
                    , new Object() {
                    }.getClass().getEnclosingMethod().getName());
        }
    }
    /*public void loginRsa() {
        try {
            LoginPage.login(driver
                    , Property.fromFile(GeneralConstants.TEST_CONFIG_FILE_NAME).getProperty("login.mdd.userMail2")
                    , Property.fromFile(GeneralConstants.TEST_CONFIG_FILE_NAME).getProperty("login.mdd.password2"));
        } catch (Exception e) {
            ExceptionHandler.onExceptionRaised(e
                    , new Object() {
                    }.getClass().getName()
                    , new Object() {
                    }.getClass().getEnclosingMethod().getName());
        }
    }*/

    @Test(priority = 0, enabled = false,dataProvider = "addUser")
    public void addUser(User user) {

        try {
            //Create extent test to be logged in report using test case title
            test = extent.createTest(user.getTestCaseTitle());
            Log.test = test;
            Log.startTestCase(user.getTestCaseTitle());
            if (user.getUsername() != null && !user.getUsername().contains("invalid") )
               user.setUsername("User_"+Randomizer.getInt());
            if (user.getUserEmail() != null && !user.getUserEmail().contains("invalid")) {
                user.setUserEmail("mail"+Randomizer.getInt()+"@test.com");
            }
           String actualResult= AdminUserControl.addUser(driver,user);
           Assert.assertEquals(actualResult, user.getExpectedMassage());
        } catch (Exception e) {
            ExceptionHandler.onExceptionRaised(e
                    , new Object() {
                    }.getClass().getName()
                    , new Object() {
                    }.getClass().getEnclosingMethod().getName());
        }
    }

    @Test(priority = 1, enabled = false, dataProvider = "checkAutoGenerateDP")
    public void checkAutoGenerate(User user) {

        try {
            //Create extent test to be logged in report using test case title
            test = extent.createTest(user.getTestCaseTitle());
            Log.test = test;
            Log.startTestCase(user.getTestCaseTitle());

            user.setUsername("User_"+Randomizer.getInt());
            user.setUserEmail("mail"+Randomizer.getInt()+"@test.com");

            Assert.assertTrue(AdminUserControl.addUserWithAutoGenerate(driver,user),"Auto generated password massage doesnt appear");

        } catch (Exception e) {
            ExceptionHandler.onExceptionRaised(e
                    , new Object() {
                    }.getClass().getName()
                    , new Object() {
                    }.getClass().getEnclosingMethod().getName());
        }
    }




    @Test(priority = 2, enabled = false,dataProvider = "addExistingUser")
    public void addExistingUser(User user) {

        try {
            //Create extent test to be logged in report using test case title
            test = extent.createTest(user.getTestCaseTitle());
            Log.test = test;
            Log.startTestCase(user.getTestCaseTitle());
            if (user.getUsername() != null)
                user.setUsername("User_"+Randomizer.getInt());
            if (user.getUserEmail() != null && !user.getUserEmail().contains("invalid")) {
                user.setUserEmail("mail"+Randomizer.getInt()+"@test.com");
            }
            String actualResult= AdminUserControl.addUser(driver,user);
            Assert.assertEquals(actualResult, user.getExpectedMassage());
            actualResult= AdminUserControl.addUser(driver,user);
            Assert.assertEquals(actualResult, user.getExpectedMassage());
        } catch (Exception e) {
            ExceptionHandler.onExceptionRaised(e
                    , new Object() {
                    }.getClass().getName()
                    , new Object() {
                    }.getClass().getEnclosingMethod().getName());
        }
    }


    @Test(priority = 3, enabled = true,dataProvider = "loginByApprovedUser")
    public void loginByApprovedUser(User user)  {

        try {
            //Create extent test to be logged in report using test case title
            test = extent.createTest(user.getTestCaseTitle());
            Log.test = test;
            Log.startTestCase(user.getTestCaseTitle());

                user.setUsername("User_"+Randomizer.getInt());

                user.setUserEmail("mail"+Randomizer.getInt()+"@test.com");

            String actualResult= AdminUserControl.addUser(driver,user);
            Assert.assertEquals(actualResult, user.getExpectedMassage());
            LoginPage.Logout(driver);
            driver.navigate().refresh();
            LoginPage.login(driver,"LSA","gabr1234");
            Assert.assertEquals(AdminUserControl.enableUser(driver,user.getUsername()),"User Has Been Enabled Successfully");
            driver.navigate().refresh();
            Assert.assertEquals(AdminUserControl.approveUser(driver,user.getUsername()),"User Has Been Approved Successfully");
            LoginPage.Logout(driver);
            driver.navigate().refresh();
            LoginPage.login(driver,"RSA","gabr1234");
            Assert.assertEquals(AdminUserControl.enableUser(driver,user.getUsername()),"User Has Been Enabled Successfully");
            Assert.assertEquals(AdminUserControl.approveUser(driver,user.getUsername()),"User Has Been Approved Successfully");
            LoginPage.Logout(driver);
            LoginPage.login(driver,user.getUsername(),user.getPassword());
        } catch (Exception e) {
            ExceptionHandler.onExceptionRaised(e
                    , new Object() {
                    }.getClass().getName()
                    , new Object() {
                    }.getClass().getEnclosingMethod().getName());
        }


    }
    @Test(priority = 1, enabled = false)
    public void cancelCreatingUser()  {

        try {
            //Create extent test to be logged in report using test case title
           // test = extent.createTest(user.getTestCaseTitle());
           // Log.test = test;
           //Log.startTestCase(user.getTestCaseTitle());
            AdminUserControl.cancelAddingUser(driver);

        } catch (Exception e) {
            ExceptionHandler.onExceptionRaised(e
                    , new Object() {
                    }.getClass().getName()
                    , new Object() {
                    }.getClass().getEnclosingMethod().getName());
        }


    }

    @Test(priority = 5, enabled = false,dataProvider = "loginByApprovedUser")
    public void approveUserByLSA(User user)  {

        try {
            //Create extent test to be logged in report using test case title
            test = extent.createTest(user.getTestCaseTitle());
            Log.test = test;
            Log.startTestCase(user.getTestCaseTitle());
            user.setUsername("User_"+Randomizer.getInt());
            user.setUserEmail("mail"+Randomizer.getInt()+"@test.com");
            AdminUserControl.addUser(driver,user);
            Controls.waitForPageToLoad(driver);
            AdminUserControl.CheckLSAAuthorityForApproving(driver,user.getUsername());
            Controls.waitForPageToLoad(driver);
           //Assert.assertEquals(actualResult, user.getExpectedMassage());String actualResult=
           // Assert.assertEquals(AdminUserControl.approveUser(driver,user.getUsername()),"User Has Been Approved Successfully");
           //LoginPage.Logout(driver);
           //LoginPage.login(driver,"RSA","gabr1234");
           /* UsersManager.clickOnLastPage(driver);
            Assert.assertEquals(AdminUserControl.approveUser(driver,user.getUsername()),"User Has Been Approved Successfully");**/


        } catch (Exception e) {
            ExceptionHandler.onExceptionRaised(e
                    , new Object() {
                    }.getClass().getName()
                    , new Object() {
                    }.getClass().getEnclosingMethod().getName());
        }


    }


    @Test(priority = 5, enabled = false,dataProvider = "loginByApprovedUser")
    public void disapproveUserByLSA(User user)  {

        try {
            //Create extent test to be logged in report using test case title
            test = extent.createTest(user.getTestCaseTitle());
            Log.test = test;
            Log.startTestCase(user.getTestCaseTitle());
             AdminUserControl.CheckLSAAuthorityForDisApproving(driver);
            //AdminUserControl.CheckLSAAuthorityForDisApproving(driver,user.getUsername2());


        } catch (Exception e) {
            ExceptionHandler.onExceptionRaised(e
                    , new Object() {
                    }.getClass().getName()
                    , new Object() {
                    }.getClass().getEnclosingMethod().getName());
        }


    }


    @Test(priority = 1, enabled = false,dataProvider = "loginByApprovedUser")
    public void VerifyOnDisApproveStatus(User user)  {
       try {
            //Create extent test to be logged in report using test case title
            test = extent.createTest(user.getTestCaseTitle());
            Log.test = test;
            Log.startTestCase(user.getTestCaseTitle());
            AdminUserControl.disapproveButtonWillSwitchTheUserToUnapproved(driver);
            Assert.assertTrue(UsersManager.flag);
        } catch (Exception e) {
            ExceptionHandler.onExceptionRaised(e
                    , new Object() {
                    }.getClass().getName()
                    , new Object() {
                    }.getClass().getEnclosingMethod().getName());
        }


    }

    @Test(priority = 1, enabled = false,dataProvider = "addUser")
    public void EditUser(User user)  {
        try {
            //Create extent test to be logged in report using test case title
            test = extent.createTest(user.getTestCaseTitle());
            Log.test = test;
            Log.startTestCase(user.getTestCaseTitle());
            user.setUsername("User_"+Randomizer.getInt());
            user.setUserEmail("mail"+Randomizer.getInt()+"@test.com");
            AdminUserControl.addUser(driver,user);
            AdminUserControl.editInUserInformation(driver,user.getUsername());
           // Assert.assertTrue(UsersManager.flag);
        } catch (Exception e) {
            ExceptionHandler.onExceptionRaised(e
                    , new Object() {
                    }.getClass().getName()
                    , new Object() {
                    }.getClass().getEnclosingMethod().getName());
        }


    }



    @DataProvider(name = "addUser")
    public Object[][] addUserDp() throws IOException {
        String dataFilePath = userDirectoryPath + testDataConfigsProps.getProperty("addUser");
        DataResource resource =
                new InputStreamResource(new FileInputStream(dataFilePath),
                        User.class, "json");
        SeLionDataProvider dataProvider =
                DataProviderFactory.getDataProvider(resource);
        return dataProvider.getAllData();
    }

    @DataProvider(name = "checkAutoGenerateDP")
    public Object[][] checkAutoGenerateDP() throws IOException {
        String dataFilePath = userDirectoryPath + testDataConfigsProps.getProperty("checkAutoGenerateDP");
        DataResource resource =
                new InputStreamResource(new FileInputStream(dataFilePath),
                        User.class, "json");
        SeLionDataProvider dataProvider =
                DataProviderFactory.getDataProvider(resource);
        return dataProvider.getAllData();
    }
    @DataProvider(name = "addExistingUser")
    public Object[][] addExistingUserDp() throws IOException {
        String dataFilePath = userDirectoryPath + testDataConfigsProps.getProperty("addExistingUser");
        DataResource resource =
                new InputStreamResource(new FileInputStream(dataFilePath),
                        User.class, "json");
        SeLionDataProvider dataProvider =
                DataProviderFactory.getDataProvider(resource);
        return dataProvider.getAllData();
    }
    @DataProvider(name = "loginByApprovedUser")
    public Object[][] loginByApprovedUserDP() throws IOException {
        String dataFilePath = userDirectoryPath + testDataConfigsProps.getProperty("loginByApprovedUser");
        DataResource resource =
                new InputStreamResource(new FileInputStream(dataFilePath),
                        User.class, "json");
        SeLionDataProvider dataProvider =
                DataProviderFactory.getDataProvider(resource);
        return dataProvider.getAllData();
    }

    @DataProvider(name = "disapproveUser")
    public Object[][] disapproveUser() throws IOException {
        String dataFilePath = userDirectoryPath + testDataConfigsProps.getProperty("disapproveUser");
        DataResource resource =
                new InputStreamResource(new FileInputStream(dataFilePath),
                        User.class, "json");
        SeLionDataProvider dataProvider =
                DataProviderFactory.getDataProvider(resource);
        return dataProvider.getAllData();
    }



  /*  @DataProvider(name = "EditingUserInformation")
    public Object[][] editUser() throws IOException {
        String dataFilePath = userDirectoryPath + testDataConfigsProps.getProperty("EditingUserInformation");
        DataResource resource =
                new InputStreamResource(new FileInputStream(dataFilePath),
                        User.class, "json");
        SeLionDataProvider dataProvider =
                DataProviderFactory.getDataProvider(resource);
        return dataProvider.getAllData();
    }*/
}
